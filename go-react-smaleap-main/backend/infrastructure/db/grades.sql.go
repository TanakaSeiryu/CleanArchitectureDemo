// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: grades.sql

package db

import (
	"context"
)

const getGradesAll = `-- name: GetGradesAll :many
SELECT id, name, subject_id, grade, created_at FROM grades
`

func (q *Queries) GetGradesAll(ctx context.Context) ([]Grade, error) {
	rows, err := q.db.QueryContext(ctx, getGradesAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Grade
	for rows.Next() {
		var i Grade
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SubjectID,
			&i.Grade,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerGrade = `-- name: RegisterGrade :one
INSERT INTO grades (
    name,
    subject_id,
    grade
) VALUES (
    $1, $2, $3
)
RETURNING id, name, subject_id, grade, created_at
`

type RegisterGradeParams struct {
	Name      string
	SubjectID int32
	Grade     int32
}

func (q *Queries) RegisterGrade(ctx context.Context, arg RegisterGradeParams) (Grade, error) {
	row := q.db.QueryRowContext(ctx, registerGrade, arg.Name, arg.SubjectID, arg.Grade)
	var i Grade
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubjectID,
		&i.Grade,
		&i.CreatedAt,
	)
	return i, err
}
